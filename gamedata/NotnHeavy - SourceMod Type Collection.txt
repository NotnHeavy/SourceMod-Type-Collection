// PLEASE READ BEFORE MODIFYING!
// I'd imagine this gamedata would be used across many plugins of different release dates.
// When updating, do NOT remove anything that is currently unused within this version of SMTC.
// Some versions of SMTC may still rely on gamedata that may be unused in modern versions.
// Of course, update signatures/offsets whenever necessary (I.E. updates).

"Games"
{
    "tf"
    {
		"Addresses"
		{
			"g_pTFPlayerClassDataMgr"
			{
				"windows"
				{
					"signature" "GetPlayerClassData()"
					"read"      "11"
				}
				"linux"
				{
					"signature" "g_pTFPlayerClassDataMgr"
				}
				"read" "0"
			}
			"enginetrace"
			{
				"windows"
				{
					"signature" "CBaseEntity::HandleShotImpactingWater()"
					"read"      "55"
				}
				"linux"
				{
					"signature" "enginetrace"
				}
				"read" "0"
			}
		}
		"Offsets"
		{
			"OSTypeUsed"
			{
				"windows" "0"
				"linux"   "1"
				"mac"     "2"
			}

			"IEngineTrace::ClipRayToEntity()"
			{
				"windows" "2"
				"linux"   "4"
			}
			"IEngineTrace::TraceRay()"
			{
				"windows" "4"
				"linux"   "4"
			}
		}
        "Signatures"
        {
			"GetPlayerClassData()" // offset aMultPlayerAimi ; "mult_player_aiming_movespeed", called twice at the top
			{
				"library" "server"
				"windows" "\x55\x8B\xEC\x69\x4D\x08\xF0\x08\x00\x00"
			}
			"g_pTFPlayerClassDataMgr"
			{
				"library" "server"
				"linux"   "@g_pTFPlayerClassDataMgr"
			}
			"enginetrace"
			{
				"library" "server"
				"linux"   "@enginetrace"
			}

			"CTraceFilterSimple::ShouldHitEntity()"
			{
				"library" "server"
				"windows" "\x55\x8B\xEC\x53\x8B\x5D\x0C\x56\x8B\x75\x08\x57\x53" // search vtable for CTraceFilterSimple, vfunc 0
				"linux"	  "@_ZN18CTraceFilterSimple15ShouldHitEntityEP13IHandleEntityi"
			}

			"CBaseEntity::HandleShotImpactingWater()"
			{
				"library" "server"
				"windows" "\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x8B\x43\x08\x81\xEC\x08\x01\x00\x00\x83\xC0\x04" // xrefs to "gunshotsplash"
			}

            "CTFPlayer::OnTakeDamage_Alive()" // offset aBleedingDurati ; "bleeding_duration"
			{
				"library" "server"
				"windows" "\x55\x8B\xEC\x83\xEC\x7C\x56\x57"
				"linux"   "@_ZN9CTFPlayer18OnTakeDamage_AliveERK15CTakeDamageInfo"
			}

			"CTFRadiusDamageInfo::CalculateFalloff()" // offset aMultDmgFalloff ; "mult_dmg_falloff"
			{
				"library" "server"
				"windows" "\x55\x8B\xEC\x51\x56\x8B\xF1\x8B\x0E"
				"linux"	  "@_ZN19CTFRadiusDamageInfo16CalculateFalloffEv"
			}
			"CTFRadiusDamageInfo::ApplyToEntity()" // offset aAddHealthOnRad ; "add_health_on_radius_damage", 2nd call above (call above GetTFWpnData)
			{
				"library" "server"
				"windows" "\x55\x8B\xEC\x81\xEC\x3C\x01\x00\x00\x8B\xD1"
				"linux"   "@_ZN19CTFRadiusDamageInfo13ApplyToEntityEP11CBaseEntity"
			}
        }
        "Functions"
        {
            "CTFPlayer::OnTakeDamage_Alive()"
			{
				"signature"	"CTFPlayer::OnTakeDamage_Alive()"
				"callconv"	"thiscall"
				"return"	"int" 
				"this"		"entity"
				"arguments"
				{
					"info"
					{
						"type" "int"
					}
				}
			}
        }
    }
}